sonar.projectKey=pl.edu.knbit.qa:if-qa
sonar.projectName=Quality Assurance - Idea Factory
sonar.projectVersion=0.0.1-SNAPSHOT

sonar.modules=rmi-server,rmi-client

rmi-server.sonar.projectName=Quality Assurance - Server
rmi-server.sonar.projectVersion=0.0.1-SNAPSHOT
rmi-server.sonar.projectKey=pl.edu.knbit.qa:rmi-server
rmi-server.sonar.sources=src/main/java
rmi-server.sonar.tests=../rmi-test/src/main/java,src/test/java
rmi-server.sonar.binaries=target/classes

rmi-client.sonar.projectName=Quality Assurance - Client
rmi-client.sonar.projectVersion=0.0.1-SNAPSHOT
rmi-client.sonar.projectKey=pl.edu.knbit.qa:rmi-client
rmi-client.sonar.sources=src/main/java
rmi-client.sonar.tests=src/test/java
rmi-client.sonar.binaries=target/classes

sonar.language=java

#Tells SonarQube to reuse existing reports for unit tests execution and coverage reports
sonar.dynamicAnalysis=reuseReports

#Tells SonarQube where the unit tests execution reports are
sonar.junit.reportsPath=reports/junit

#Tells SonarQube that the code coverage tool by unit tests is JaCoCo
sonar.java.coveragePlugin=jacoco

#Tells SonarQube where the unit tests code coverage report is
#sonar.jacoco.reportPath=reports/jacoco/jacoco-ut.exec

#Tells SonarQube where the integration tests code coverage report is
#sonar.jacoco.itReportPath=reports/jacoco/jacoco-it.exec
rmi-server.sonar.jacoco.itReportPath=../jacoco-it.exec

# Encoding of the source files
sonar.sourceEncoding=UTF-8


# PostgreSQL
# uncomment the 3 following lines to use PostgreSQL
sonar.jdbc.url:                            jdbc:postgresql://localhost:5432/sonar
sonar.jdbc.driverClassName:                org.postgresql.Driver
sonar.jdbc.validationQuery:                select 1

# generic settings
sonar.jdbc.username=postgres
sonar.jdbc.password=postgres
sonar.jdbc.maxActive=10
sonar.jdbc.maxIdle=5
sonar.jdbc.minIdle=2
sonar.jdbc.maxWait=5000
sonar.jdbc.minEvictableIdleTimeMillis=600000
sonar.jdbc.timeBetweenEvictionRunsMillis=30000